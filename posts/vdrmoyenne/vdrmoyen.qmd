---
title: "Pressions monitorées lors de la ventilation percussive"
author: Nicolas Blais St-Laurent
license: "CC BY-SA"
image: thumbnail.png
date: 2023-12-29
lang: fr
echo: false
description: "Lors de la ventilation percussive, les variations de
  pressions mesurées dans le circuit du ventilateur sont en très
  grande partie dissipées en chaleur par les résistances des voies
  aériennes."
---

Lors de la ventilation percussive, les variations de pressions
mesurées dans le circuit du ventilateur sont en très grande partie
dissipées en chaleur par les résistances des voies aériennes.

Lors de la rédaction du protocole clinique de notre institution pour
l'utilisation du ventilateur VDR-4, il nous a semblé intéressant
d'utiliser les pressions moyenne inspiratoire et expiratoire, plutôt
que les pressions lues à la crête de l'inspiration et de l'expiration.
Le raisonnement étant que ces pressions moyennes reflèteraient mieux
les variations de pressions subies par les alvéoles pulmonaires.

```{ojs}
pscale = Plot.scale({ color: {domain:["Pcirc", "Palv"]}
});
```

```{ojs}
Plot.legend({
color: {domain:["Pcirc", "Palv"]}
});
```

```{ojs}
palvPlot = {
	return Plot.plot({... plOpts,
		marks: [
			Plot.line(dataPA, {x:
				"time",
				y: "Palv",
				stroke: pscale.apply('Palv'),
				strokeWidth: 2
			}),
			Plot.line(dataPA, {
				x: "time",
				y: "Pao",
				stroke: pscale.apply("Pcirc")
			}),
		]
	});
}
```

Le problème avec cette approche est que les pression moyenne
inspiratoire et expiratoire sont lues pendant *toute* l'inspiration et
l'expiration. Cette faille dans notre raisonnement nous est apparue
particulièrement flagrante lorsque nous avons constaté que la pression
expiratoire positive (PEP) affichée par le Monitron (lue à la crête)
était inférieure à la pression expiratoire moyenne affichée par le
multimètre numérique du VDR-4.

Il en résulte nécessairement que la pression moyenne
inspiratoire *sous-estime* la pression dans les alvéoles à la fin de
l'expiration. Et que la pression moyenne expiratoire *surestime* la
pression dans les alvéoles à la fin de l'expiration. Et par conséquent
que ces deux pressions moyenne *sous-estiment* les variation de
pression subies par les alvéoles entre la phase expiratoire et la
phase inspiratoire.

### Simulation du protocole CHUM et du protocole Percussionaire

La simulation suivante, effectuée au moyen de la librairie
[simvent.js](http://progrt.github.io/simvent.js/) compare les
paramètres de base du  protocole du CHUM à celui de Percussionaire.

Alors que le protocole du CHUM vise une pression moyenne
expiratoire de 5 cmH₂O, celui de Percussionaire vise une PEP de 10
cmH₂O lue à la crête.

:::{layout-ncol=2}
```{ojs}
viewof simCHUM = Inputs.form({
	label: md`**Protocole CHUM**`,
	Fiph: Inputs.range([0, 3], {value: 1, step:0.05, label: "Débit pulsé"}),
	Fipl: Inputs.range([0, .5], {value: .027, step:0.001, label: "PEP oscillante"}),
	})
```

```{ojs}
viewof simPA = Inputs.form({
	label: md`**Protocole Percussionaire**`,
	Fiph: Inputs.range([0, 3], {value: 1, step:0.05, label: "Débit pulsé"}),
	Fipl: Inputs.range([0, .5], {value: .155, step:0.001, label: "PEP oscillante"}),
	})
```
:::

```{ojs}
dataCHUM = {
	var vdr = new sv.VDR({
		...simCHUM,
		Tvent: 8,
		lppe: 6
		});

	var lung = new sv.SimpleLung();
	var data = vdr.ventilate(lung).timeData;

	return data;
}
```

```{ojs}
dataPA = {
	var vdr = new sv.VDR({
		...simPA,
		Tvent: 8,
		lppe: 6
		});

	var lung = new sv.SimpleLung();
	var data = vdr.ventilate(lung).timeData;

	return data;
}
```

```{ojs}
anCHUM = va.analyse(dataCHUM, "Protocole CHUM");
```

```{ojs}
anPA = va.analyse(dataPA, "Protocole Percussionaire");
```

```{ojs}
viewof tbl = {
	var tbl = va.tblAnalysis(anCHUM, anPA);
	var rm = tbl.querySelector(".tblaendMeanrow");

	tbl.value = null;

	rm.addEventListener("mouseover", e=>{
		rm.style.background = "tomato";
		tbl.value = "endMean";
		tbl.dispatchEvent(new Event('input'));
	});

	rm.addEventListener("mouseout", e=>{
		rm.style.background = "";
		tbl.value = null;
		tbl.dispatchEvent(new Event('input'));
	});

	return tbl;
}
```

```{ojs}
cscale = Plot.scale({ color: {domain:["CHUM", "Percussionaire"]}
});
```

```{ojs}
Plot.legend({
color: {domain:["Protocole CHUM", "Protocole Percussionaire"]}
});
```

```{ojs}
protocolsPlots = {
	return Plot.plot({... plOpts,
		marks: [
			Plot.line(dataPA, {
				x: "time",
				y: "Pao",
				stroke: cscale.apply("Percussionaire")
			}),
			Plot.line(dataCHUM, {x:
				"time",
				y: "Pao",
				stroke: cscale.apply('CHUM'),
				strokeWidth: 2
			}),
			drawPlage(dataCHUM, 3.5, 4),
			drawPlage(dataCHUM, 5.5, 6)
		]
	});
}
```

```{ojs}
sv = import("https://progrt.github.io/simvent.js/src/simvent.js");
```

```{ojs}
va = import('https://progrt.github.io/simvent.js/src/vdrSignalAnalysis.js');
```

```{ojs}
drawPlage = function(data, start, end){
	return Plot.rect(data, {
		x1: start,
		x2: end,
		stroke: "tomato",
		strokeWidth: 1.5,
		strokeDasharray: [10, 7], 
		opacity: tbl == "endMean" ? 1 : 0
	});
}
```

```{ojs}
plOpts = {
	return {
	height: 300,
	width: 900,
	grid: true,
	}
}
```

