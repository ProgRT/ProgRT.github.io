---
title: Ajustement du T<sub>bas</sub> en APRV
echo: false
image: thumbnail.png
draft: true
---

```{ojs}
//|classes: card card-body
//|style: "margin-bottom: 20px"
Plot.plot({
	width: width,
	height: 150,
	grid: true,
	x: {label: "Temps (s)"},
	y: {label: "D√©bit (l/s)"},
	marks: [
	Plot.line(data, {x: "time", y: "Flung"}),
	]
})
```

:::{layout-ncol=2}
```{ojs}
//|classes: card card-body
viewof formLung = Inputs.form({
	label: md`**ü´Å M√©canique**`,
	Raw: Inputs.range([1, 40], {value: 5, step: 1, label: md`R<sub>aw</sub>`}),
	Crs: Inputs.range([5, 100], {value: 40, step: 1, label: md`C<sub>st</sub>`}),
})

lung = new sv.SimpleLung(formLung);
md`Constante de temps : ${lung.TC.toFixed(2)} s`
```

```{ojs}
//|classes: card card-body
viewof formVent = Inputs.form({
	label: md`**üéõÔ∏è Param√®tres de ventilation**`,
	Phigh: Inputs.range([0, 50], {value: 20, step: 1, label: md`P<sub>hte</sub> <small>(mbar)</small>`}),
	Plow: Inputs.range([0, 40], {value: 0, step: 1, label: md`P<sub>basse</sub> <small>(mbar)</small>`}),
	Thigh: Inputs.range([.5, 30], {value: 4, step:.1, label: md`T<sub>haut</sub> <small>(s)</small>`}),
	Tlow: Inputs.range([.01, 1], {value: .5, step:.01, label: md`T<sub>bas</sub> <small>(s)</small>`}),
	Tvent: Inputs.range([6, 60], {value: 24, step:1, label: md`Dur√©e sim. <small>(s)</small>`}),
})

vent = new sv.APRV({...formVent});
```
:::


:::{layout-ncol=2}
```{ojs}
//|classes: card card-body

	cropped = data.filter(d=>{
			return d.time > ex.midPoint - 2* ex.Tlow && d.time < ex.midPoint + 2*ex.Tlow
		}
	);

	Plot.plot({
		width: 400,
		height: 300,
		grid: true,
		x: {label: "Temps (s)"},
		y: {label: "D√©bit (l/s)"},
		marks: [
			Plot.line(cropped, {x: "time", y: "Flung"}),
			Plot.dot([ex.start, ex.end], { x: "time", y: "Flung", stroke: "red" }),
		]
	});
```

|                      |                                   |                      |
| --                   | -:                                | :-                   |
| V'<sub>pte</sub>     | ${ex.start.Flung.toFixed(1)}      | <small>l/sec</small> |
| V'<sub>fin</sub>     | ${ex.end.Flung.toFixed(1)}        | <small>l/sec</small> |
| Ratio                | ${ex.flowRatio.toFixed(2)}        |                      |
| V<sub>t</sub>        | ${1000 * ex.Vt.toFixed(3)}        | <small>ml</small>    |
| T<sub>bas</sub>      | ${ex.Tlow.toFixed(2)}             | <small>sec</small>     |
| T<sub>bas</sub> / CT | ${(ex.Tlow / lung.TC).toFixed(2)} |                      |
| PEP<sub>eff</sub>    | ${ex.end.Palv.toFixed(1) }        | <small>cmH‚ÇÇO</small> |

: {}

:::

```{ojs}
import {exalations, peakDim, minDim, sigPosToNeg, sigNegToPos, deriv} from "@progrt/signal";

sv = import("https://cdn.jsdelivr.net/gh/progrt/simvent.js@3.3/src/simvent.js");

data = vent.ventilate(lung).timeData;

ex = exalations(data).slice(-1)[0];
```
